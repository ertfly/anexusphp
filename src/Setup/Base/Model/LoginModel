<?php

namespace {{app}}\Modules\Account\Models;

use AnexusPHP\Business\App\Rule\AppSessionRule;
use AnexusPHP\Business\Authfast\Entity\AuthfastEntity;
use AnexusPHP\Business\Authfast\Repository\AuthfastRepository;
use AnexusPHP\Business\Authfast\Rule\AuthfastRule;
use AnexusPHP\Core\Tools\Jwt;
use Exception;

class AccountModel
{
    public static function submit()
    {
        $jwt = new Jwt('{{secret_key}}');
        $data = $jwt->decode(input('jwt', null, 'get'));

        if (!isset($data['response']) || !isset($data['response']['code']) || trim($data['response']['code']) == '') {
            throw new Exception('Integração inválida, solicite ajuda pelo suporte');
        }

        $headers = [
            'appKey: {{app_key}}',
            'secretKey: {{secret_key}}'
        ];

        $data = self::sendGetJson('https://authfast.com.br/api/profile/' . $data['data']['authfast_id'], $headers, false);
        if (!isset($data['response']) || !isset($data['response']['code']) || trim($data['response']['code']) == '') {
            throw new Exception('Integração inválida, solicite ajuda pelo suporte');
        }

        if ($data['response']['code'] != 0) {
            switch ($data['response']['code']) {
                case 1000:
                    throw new Exception('Integração inválida, solicite ajuda pelo suporte');
                    break;
                case 1001:
                    throw new Exception('Authfast ID inválido');
                    break;
                case 1002:
                    throw new Exception('Authfast ID não autorizado');
                    break;
                default:
                    throw new Exception('Authfast informou o retorno da autorização como ' . $data['response']['msg']);
            }
        }

        $authfast = AuthfastRepository::byCode($data['data']['authfast_id']);

        $authfast = (new AuthfastEntity)
        ->setCode($data['data']['authfast_id'])
        ->setFirstname($data['data']['firstname'])
        ->setLastname($data['data']['lastname'])
        ->setUsername($data['data']['username'])
        ->setEmail(null)
        ->setPhoto($data['data']['photo'])
        ->setBanner($data['data']['banner'])
        ->setCreatedAt($data['data']['created_at'])
        ->setUpdatedAt($data['data']['updated_at']);
        
        AuthfastRule::insert($authfast);
        
        request()->sid->setPersonId($authfast->getId());

        AppSessionRule::update(request()->sid);
    }

    public static function sendGetJson($url, $headers = [], $decode = true)
        {
            $ch = curl_init();
            curl_setopt($ch, CURLOPT_URL, $url);
            curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 60);
            curl_setopt($ch, CURLOPT_TIMEOUT, 60);
            curl_setopt($ch, CURLOPT_HEADER, false);
    
            $response = curl_exec($ch);
    
            if (curl_errno($ch) || !$response) {
                throw new Exception('Ocorreu um erro na sua requisição');
            }
    
            curl_close($ch);
    
            return json_decode($response, true);
        }
}
